#!/usr/bin/env python3
import math, numpy, random, matplotlib.pyplot as plt
from scipy import optimize


# functions for testing
def f(x):
    return (x**3)

def f(x):
    return -1 * (x**3)

def f2(x):
    return math.sin(x)

def f2neg(x):
    return -1 * math.sin(x)

def f3(x,y):   # this is a 3d function
    z = x**2 + y**2   # min will be z = 0 for x=0, y=0
    return z

# stepping up
def optimize_step(f,bounds,n):
    y = []
    lower, upper = bounds
    x = numpy.linspace(lower, upper, n)
    maxval = f(x[0])          # first known max. since it's the only one
    xval = x[0]
    for i in x:
        y.append(f(i))
        if f(i) > maxval:     # if current value greater than known max thus far
            maxval = f(i)     # ...overwrite the known maxval.
            xval = i
    return maxval,xval   # may need to get rid of the "maxval".


# random samples doing the same thing
def optimize_random(f, bounds, n):
    y = []
    lower, upper = bounds
    xs = []
    for i in range(0,n):
        x = random.uniform(lower, upper)
        xs.append(x)
        y.append(f(x))

    maxval = max(y)         # get max value in y
    xind = y.index(maxval)  # get index for max value
    xval = xs[xind]        # get x corresponding to index

    return maxval, xval

# multi dimensional ( really just 3d...maybe 4)
def optimize_md(f,bounds):   # default takes 1000 steps
    lowest = []
    dim = len(bounds)
    uppers = []
    lowers = []
    for i in bounds:
        lower, upper = i
        lowers.append(lower)
        uppers.append(upper)

    return 0

if __name__ == '__main__':

    solution = optimize_step(f2,(0,4),100)
    print(solution)

    solution2 = optimize_random(f2,(0,4),100)
    print(solution2)

    [xopt, fopt, iter, funccalls, warnflags] = optimize.fmin(f2neg, 1, full_output = 1, disp = 0, retall = False)
    print(fopt,float(xopt)) # fopt is a float, value of function at minimum; xopt is the
    print(iter)

    ################## parameter that minimizes the function

    # res = optimize_md(f3,[(-11,11),(-11,11)])
    # print(res)

# plots
# the solution for sin(x) over [0,4] is 1, at about 1.57 (0.5*pi).
    error1 = []
    error2 = []
    numpt = 100
    for i in range(1,numpt+1):
        solution = 1
        sol1,x1 = optimize_step(f2,(0,4),i)
        sol2,x2 = optimize_random(f2,(0,4),i)
        # errors
        error1.append(abs(sol1 - solution))
        error2.append(abs(sol2 - solution))

    ind = numpy.linspace(0,numpt,numpt)
    plt.plot(ind,error1, label = "Step")
    plt.plot(ind,error2, label = "Random")
    plt.title('Random, Step Up, and fmin Accuracy for Optimizing')
    plt.grid(True)
    plt.xlabel('Number of Samples')
    plt.ylabel('Error')

# fmin error
    error3 = abs((-fopt) - solution)

    plt.plot(iter,error3, 'bo', label = "fmin")

    plt.legend()
    plt.show()



