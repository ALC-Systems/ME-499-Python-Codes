#!/usr/bin/env python3


from PyQt5.QtWidgets import QApplication, \
    QMainWindow, QWidget, QPushButton, QVBoxLayout, \
    QLabel, QSlider, QStyle, QGridLayout, QGroupBox

from PyQt5.QtCore import Qt


class simulate(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.setWindowTitle('Fake Simulation System')

        # A widget to hold everything
        widget = QWidget()
        self.setCentralWidget(widget)
        self.setGeometry(100, 100, 400, 700)   # set size

        # expand grids

        grid = QGridLayout()
        grid.addWidget(self.group1(), 0, 0)
        grid.addWidget(self.group2(), 1, 0)

        self.setLayout(grid)
        self.setWindowTitle("Fake Simulator")
        self.resize(400, 300)

        # # label
        # self.label1 = QLabel()
        # self.label1.setText('System Parameters')

        # # Quit button
        # quit_button = QPushButton('Quit')
        # quit_button.clicked.connect(app.exit)

        #
        # # Add things to the layout
        # grid.addWidget(self.label1)
        # grid.addWidget(quit_button)


# define the groups
    def group1(self):

        groupBox = QGroupBox()
        vbox = QVBoxLayout()       # Vertical boxes

        # mass label
        self.masslabel = QLabel()
        self.mass_val()

        # spring label
        self.springlabel = QLabel()
        self.spring_val()

        # damper label
        self.damperlabel = QLabel()
        self.damperval()

        self.mass = QSlider(Qt.Horizontal)
        self.mass.setTickPosition(QSlider.TicksAbove)
        self.mass.setMinimum(0)
        self.mass.setMaximum(1000)
        self.mass.setTickInterval(1)
        self.mass.valueChanged.connect(self.slider_val)

        self.spring = QSlider(Qt.Horizontal)
        self.spring.setTickPosition(QSlider.TicksAbove)
        self.spring.setMinimum(0)
        self.spring.setMaximum(1000)
        self.spring.setTickInterval(1)
        self.spring.valueChanged.connect(self.slider_val)

        self.damper = QSlider(Qt.Horizontal)
        self.damper.setTickPosition(QSlider.TicksAbove)
        self.damper.setMinimum(0)
        self.damper.setMaximum(1000)
        self.damper.setTickInterval(1)
        self.damper.valueChanged.connect(self.slider_val)

        vbox.addWidget(self.masslabel)
        vbox.addWidget(mass)
        vbox.addWidget(self.springlabel)
        vbox.addWidget(spring)
        vbox.addWidget(self.damperlabel)
        vbox.addWidget(damper)
        vbox.addStretch(1)
        groupBox.setLayout(vbox)

        return groupBox

    def group2(self):

        groupBox = QGroupBox()
        vbox = QVBoxLayout()       # Vertical boxes

        # time label
        self.timelabel = QLabel()
        self.time_val()

        # timestep label
        self.timesteplabel = QLabel()
        self.timestep_val()

        self.time = QSlider(Qt.Horizontal)
        self.time.setTickPosition(QSlider.TicksAbove)
        self.time.setMinimum(0)
        self.time.setMaximum(1000)
        self.time.setTickInterval(1)
        self.time.valueChanged.connect(self.slider_val)

        self.timestep = QSlider(Qt.Horizontal)
        self.timestep.setTickPosition(QSlider.TicksAbove)
        self.timestep.setMinimum(0)
        self.timestep.setMaximum(1000)
        self.timestep.setTickInterval(1)
        self.timestep.valueChanged.connect(self.slider_val)

        vbox.addWidget(self.timelabel)
        vbox.addWidget(time)
        vbox.addWidget(self.timesteplabel)
        vbox.addWidget(timestep)
        vbox.addStretch(1)
        groupBox.setLayout(vbox)

        return groupBox

    def mass_val(self):
        val = self.mass.value()
        val /= 100
        words = 'foo: ' + str(val)
        self.masslabel.setText(words)

    def spring_val(self):
        val = self.spring.value()
        val /= 100
        words = 'foo: ' + str(val)
        self.springlabel.setText(words)

    def damper_val(self):
        val = self.damper.value()
        val /= 100
        words = 'foo: ' + str(val)
        self.damperlabel.setText(words)

    def time_val(self):
        val = self.time.value()
        val /= 100
        words = 'foo: ' + str(val)
        self.timelabel.setText(words)

    def timestep_val(self):
        val = self.slider.value()
        val /= 100
        words = 'foo: ' + str(val)
        self.timesteplabel.setText(words)

if __name__ == '__main__':
    app = QApplication([])

    app.setStyle('Fusion')

    simulation = simulate()

    simulation.show()

    app.exec_()

